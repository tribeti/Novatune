xaml

<?xml version="1.0" encoding="utf-8"?>
<Window
    x:Class="App2.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:App2"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:media="using:Windows.Media.Playback"
    mc:Ignorable="d"
    Title="App2">

    <Grid Height="auto" Width="auto">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="3*"/>
            <ColumnDefinition Width="8*"/>
        </Grid.ColumnDefinitions>


        <Grid Grid.Row="0" Grid.Column="0" Background="{ThemeResource ControlFillColorDefaultBrush}">
            <RelativePanel HorizontalAlignment="Center">
                <TextBlock Text="___" RelativePanel.AlignTopWithPanel="True"
                           RelativePanel.AlignHorizontalCenterWithPanel="True"
                           HorizontalAlignment="Center" Margin="0,12,0,12"
                           FontSize="40" x:Name="PanelTitle"
                           FontFamily="Segoe-UI-Variable-Static-Display-Semibold">
                </TextBlock>
            </RelativePanel>

            <!--queue-->
            <RelativePanel>
                <Button x:Name="QueueButton" RelativePanel.AlignBottomWithPanel="True"
                    RelativePanel.AlignLeftWithPanel="True" Margin="12,0,0,12"
                        Background="{ThemeResource AccentFillColorDefaultBrush}">
                    <BitmapIcon UriSource="/Assets/queue_music_40dp_FILL0_wght400_GRAD0_opsz40.png" 
                                ShowAsMonochrome="False" Width="20">
                    </BitmapIcon>
                    <Button.Flyout>
                        <Flyout>
                            <StackPanel>
                                <TextBlock Text="Queue" FontWeight="Bold" Margin="0,0,0,10"/>
                                <ListView ItemsSource="{x:Bind _playbackList.Items}" 
                                Height="300" Width="250">
                                    <ListView.ItemTemplate>
                                        <DataTemplate x:DataType="media:MediaPlaybackItem">
                                            <StackPanel Orientation="Vertical">
                                                <TextBlock Text="{x:Bind Source.CustomProperties['Title']}" FontWeight="SemiBold"/>
                                                <TextBlock Text="{x:Bind Source.CustomProperties['Artist']}" Opacity="0.7"/>
                                            </StackPanel>
                                        </DataTemplate>
                                    </ListView.ItemTemplate>
                                </ListView>
                            </StackPanel>
                        </Flyout>
                    </Button.Flyout>
                </Button>
            </RelativePanel>
        </Grid>

        <Grid Grid.Row="1" Grid.Column="1">
            <Grid.RowDefinitions>
                <!--auto : Lấy độ dài đủ cho các thành phần con-->
                <!--* : Lấy tất cả độ dài còn lại-->
                <RowDefinition Height="auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <!--picker-->
            <Grid Grid.Row="0" Grid.Column="0">
                <RelativePanel>
                    <Button x:Name="Picker" RelativePanel.AlignTopWithPanel="True" RelativePanel.AlignRightWithPanel="True"
                             Margin="0,16,16,16" IsEnabled="True">
                        <StackPanel Orientation="Horizontal">
                            <FontIcon Glyph="&#xE838;" Margin="0,0,8,0"/>
                            <TextBlock Text="Open"/>
                        </StackPanel>
                        <Button.Flyout>
                            <Flyout Placement="Bottom">
                                <StackPanel>

                                    <!--file-->
                                    <!--<Button x:Name="PickFilesButton" Click="PickFilesButton_Click" 
                                        Width="150" Margin="0,0,0,8">
                                        <StackPanel Orientation="Horizontal">
                                            <FontIcon Glyph="&#xE8E5;" Margin="0,0,8,0"/>
                                            <TextBlock Text="Open file(s)"/>
                                        </StackPanel>
                                    </Button>

                                    --><!--folder--><!--
                                    <Button x:Name="PickFolderButton" Click="PickFolderButton_Click" Width="150">
                                        <StackPanel Orientation="Horizontal">
                                            <FontIcon Glyph="&#xE8DA;" Margin="0,0,8,0"/>
                                            <TextBlock Text="Open a folder"/>
                                        </StackPanel>
                                    </Button>-->
                                </StackPanel>
                            </Flyout>
                        </Button.Flyout>
                    </Button>
                </RelativePanel>
            </Grid>

            <!--media-->
            <Grid Grid.Column="1" Grid.Row="1">
                <MediaPlayerElement x:Name="mp" AreTransportControlsEnabled="True"/>
            </Grid>
        </Grid>
        <Frame x:Name="contentFrame"/>
    </Grid>
</Window>



cs

using Microsoft.UI.Xaml;
using Microsoft.UI.Xaml.Controls;
using Microsoft.UI.Xaml.Media;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using Windows.Media;

// media namespace
using Windows.Media.Core;
using Windows.Media.Playback;
using Windows.Storage;
using Windows.Storage.FileProperties;
using Windows.Storage.Pickers;
using Windows.Storage.Streams;

// To learn more about WinUI, the WinUI project structure,
// and more about our project templates, see: http://aka.ms/winui-project-info.

namespace App2 {
    /// <summary>
    /// An empty window that can be used on its own or navigated to within a Frame.
    /// </summary>
    public sealed partial class MainWindow : Window {
        private int _currentIndex = -1;
        private MediaPlaybackList _playbackList;
        private MediaPlayer _mediaPlayer;

        public int CurrentIndex {
            get => _currentIndex;
            set {
                if (_currentIndex != value) {
                    _currentIndex = value;
                    OnPropertyChanged(nameof(CurrentIndex));
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        private void OnPropertyChanged(string propertyName) {
            PropertyChanged?.Invoke(this , new PropertyChangedEventArgs(propertyName));
        }

        public MainWindow() {
            this.InitializeComponent();
            _playbackList = new MediaPlaybackList();
            _mediaPlayer = new MediaPlayer();
            mp.SetMediaPlayer(_mediaPlayer);
            _mediaPlayer.Source = _playbackList;
            mp.Stretch = Stretch.Uniform;
            _mediaPlayer.RealTimePlayback = true;

            SetupCustomCommands();
            LoadMediaFilesFromDFolder();
        }

        private void SetupCustomCommands() {
            mp.TransportControls.IsNextTrackButtonVisible = true;
            mp.TransportControls.IsPreviousTrackButtonVisible = true;
            mp.TransportControls.IsFastForwardButtonVisible = true;
            mp.TransportControls.IsFastRewindButtonVisible = true;
            mp.TransportControls.IsRepeatButtonVisible = true;

            mp.AreTransportControlsEnabled = true;
            mp.TransportControls.IsFastForwardEnabled = true;
            mp.TransportControls.IsFastRewindEnabled = true;

            mp.TransportControls.IsCompact = false;

            _mediaPlayer.CommandManager.NextReceived += CommandManager_NextReceived;
            _mediaPlayer.CommandManager.PreviousReceived += CommandManager_PreviousReceived;
            _mediaPlayer.CommandManager.FastForwardReceived += CommandManager_FastForwardReceived;
            _mediaPlayer.CommandManager.RewindReceived += CommandManager_RewindReceived;
        }

        private void CommandManager_NextReceived(MediaPlaybackCommandManager sender , MediaPlaybackCommandManagerNextReceivedEventArgs args) => _playbackList.MoveNext();

        private void CommandManager_PreviousReceived(MediaPlaybackCommandManager sender , MediaPlaybackCommandManagerPreviousReceivedEventArgs args) => _playbackList.MovePrevious();

        private void CommandManager_FastForwardReceived(MediaPlaybackCommandManager sender , MediaPlaybackCommandManagerFastForwardReceivedEventArgs args) {
            args.Handled = true;
            var playbackSession = _mediaPlayer.PlaybackSession;
            if (playbackSession != null && playbackSession.CanSeek) {
                var currentPosition = playbackSession.Position;
                var duration = playbackSession.NaturalDuration;
                if (duration - currentPosition <= TimeSpan.FromSeconds(5)) {
                    _playbackList.MoveNext();
                }
                else {
                    var newPosition = currentPosition + TimeSpan.FromSeconds(5);
                    playbackSession.Position = newPosition;
                }
            }
        }

        private void CommandManager_RewindReceived(MediaPlaybackCommandManager sender , MediaPlaybackCommandManagerRewindReceivedEventArgs args) {
            args.Handled = true;
            if (_mediaPlayer.Position.TotalSeconds > 5) {
                _mediaPlayer.Position -= TimeSpan.FromSeconds(5);
            }
            else {
                _mediaPlayer.Position = TimeSpan.Zero;
            }
        }

        private async void LoadMediaFilesFromDFolder() {
            var folder = await StorageFolder.GetFolderFromPathAsync(@"D:\");
            var files = await folder.GetFilesAsync();
            var mediaFiles = files.Where(file => file.ContentType.StartsWith("audio/") || file.ContentType.StartsWith("video/")).ToList();

            foreach (var file in mediaFiles) {
                var mediaPlaybackItem = new MediaPlaybackItem(MediaSource.CreateFromStorageFile(file));
                _playbackList.Items.Add(mediaPlaybackItem);
            }
        }
    }
}





note : 
 if you want to use community toolkit , go to .proj file and change into <TargetFramework>net8.0-windows10.0.22621</TargetFramework>
 link : https://devblogs.microsoft.com/ifdef-windows/announcing-windows-community-toolkit-v8-1/#dependencies